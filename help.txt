//This example code is in the Public Domain (or CC0 licensed, at your option.)
//By Evandro Copercini - 2018
//
//This example creates a bridge between Serial and Classical Bluetooth (SPP)
//and also demonstrate that SerialBT have the same functionalities of a normal Serial

#include "BluetoothSerial.h"

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

#if !defined(CONFIG_BT_SPP_ENABLED)
#error Serial Bluetooth not available or not enabled. It is only available for the ESP32 chip.
#endif

BluetoothSerial SerialBT;

struct myStruct {
  byte start;
  short int encoderI;
  short int encoderD;
  short int velocidad;
  byte flag;
  long time;
  byte end;
  // byte ultrasonicos[3];
  // int MPU;
  // byte sectorCam;
  // int TOF[2];
} __attribute__((packed));

void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32test");  //Bluetooth device name
  while (!Serial) { ; }
  while (!SerialBT) { ; }
  Serial.println("The device started, now you can pair it with bluetooth!");
}

void loop() {
  myStruct var;
  
  var.start = '#';
  var.end = '$';

  for (int i = 0; i < 100; i++) {
    if (i <= 20) {
      var.flag = 1;
    } else {
      if (i <= 40) {
        var.flag = 3;
      } else {
        var.flag = 2;
      }
    }
    var.time = (long)millis();
    var.velocidad = (short)i;
    var.encoderD = (long)i * 2;  // mm
    var.encoderI = (long)i * 4;

    while (SerialBT.available() > 0) {
      char c = SerialBT.read();
      Serial.println(c);
      if (c == 'U') {
        sendStruct(var);
      }
    }
  }
}

void sendStruct(myStruct var) {
  byte *ptr = (byte *)&var;
  for (int i = 0; i < sizeof(var); i++) {
    SerialBT.write(*(ptr + i));
    // Serial.print(*(ptr + i));
    // Serial.print(" | ");
  }
}
